"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[468],{7228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"fundamentals/structural-changes","title":"Structural Changes","description":"It is possible to perform structural changes to your navigation graph at runtime. Pass a key to Router and the graph will automatically reconcile when the key changes.","source":"@site/docs/fundamentals/structural-changes.md","sourceDirName":"fundamentals","slug":"/fundamentals/structural-changes","permalink":"/compose-router/fundamentals/structural-changes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Chained Navigation","permalink":"/compose-router/fundamentals/chained-navigation"},"next":{"title":"Android","permalink":"/compose-router/fundamentals/android"}}');var r=t(4848),o=t(8453);const s={sidebar_position:7},i="Structural Changes",c={},d=[];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structural-changes",children:"Structural Changes"})}),"\n",(0,r.jsxs)(n.p,{children:["It is possible to perform structural changes to your navigation graph at runtime. Pass a ",(0,r.jsx)(n.code,{children:"key"})," to ",(0,r.jsx)(n.code,{children:"Router"})," and the graph will automatically reconcile when the key changes."]}),"\n",(0,r.jsx)(n.p,{children:"This can be particularly useful when you only want sections of your navigation graph to exist under certain conditions."}),"\n",(0,r.jsx)(n.p,{children:"For example, you might split your navigation graph into authenticated and un-authenticated sections:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"Router(rootNavigator, key = signedIn) {\n    if (signedIn) {\n        screen<SignedIn> {\n            //..\n        }\n    } else {\n        screen<SignedOut> {\n            //..\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"signedIn"})," changes from ",(0,r.jsx)(n.code,{children:"true"})," to ",(0,r.jsx)(n.code,{children:"false"}),", The router will automatically navigate to ",(0,r.jsx)(n.code,{children:"SignedOut"})," and pop the ",(0,r.jsx)(n.code,{children:"SignedIn"})," screen off the stack."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"All screens and content lambdas will be disposed when the section of the navigation graph they belong to is removed"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(6540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);