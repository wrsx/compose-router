"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[572],{7657:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"fundamentals/chained-navigation","title":"Chained Navigation","description":"Sometimes it necessary to navigate to a screen which would otherwise require a series of individual navigations. We want to ensure that the path to this new screen remains valid so that the backstack represents a real flow. To achieve this, Compose Router introduces chained navigation:","source":"@site/docs/fundamentals/chained-navigation.md","sourceDirName":"fundamentals","slug":"/fundamentals/chained-navigation","permalink":"/compose-router/fundamentals/chained-navigation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Animations","permalink":"/compose-router/fundamentals/animations"},"next":{"title":"Structural Changes","permalink":"/compose-router/fundamentals/structural-changes"}}');var i=a(4848),o=a(8453);const s={sidebar_position:6},r="Chained Navigation",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"chained-navigation",children:"Chained Navigation"})}),"\n",(0,i.jsx)(n.p,{children:"Sometimes it necessary to navigate to a screen which would otherwise require a series of individual navigations. We want to ensure that the path to this new screen remains valid so that the backstack represents a real flow. To achieve this, Compose Router introduces chained navigation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"// Navigate to NewsPost(123), but make sure Home and Newsfeed are on the backstack\n\nnavigate(Home.then(Newsfeed).then(NewsPost(123)))\n"})}),"\n",(0,i.jsx)(n.p,{children:"Chained navigation also works for nested navigators, allowing you to express navigation paths which span over multiple navigators:"}),"\n",(0,i.jsx)(n.p,{children:"Given this navigation graph:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"val rootNavigator = rememberNavigator<Root>()\n\nRouter(rootNavigator) {\n    screen<SignedIn> {\n        val signedInNavigator = rememberNavigator()\n\n        Router(signedInNavigator) {\n            screen<TabA> {\n                //..\n            }\n            screen<TabB> {\n                //..\n            }\n        }\n    }\n\n    screen<SignedOut> {\n        //..\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We could then navigate into TabA via the rootNavigator:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"rootNavigator.navigate(SignedIn).then(TabA)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Chained navigation is type safe, and will only allow you to express navigation paths which are defined in your graph. Following the above example, the following would be invalid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"// Error: SignedOut is not a child screen of TabA\n\nrootNavigator.navigate(SignedIn.then(TabA).then(SignedOut))\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);